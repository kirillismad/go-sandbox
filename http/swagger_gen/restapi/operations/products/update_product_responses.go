// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"sandbox/http/swagger_gen/models"
)

// UpdateProductOKCode is the HTTP code returned for type UpdateProductOK
const UpdateProductOKCode int = 200

/*
UpdateProductOK OK

swagger:response updateProductOK
*/
type UpdateProductOK struct {

	/*
	  In: Body
	*/
	Payload *models.EchoExampleProduct `json:"body,omitempty"`
}

// NewUpdateProductOK creates UpdateProductOK with default headers values
func NewUpdateProductOK() *UpdateProductOK {

	return &UpdateProductOK{}
}

// WithPayload adds the payload to the update product o k response
func (o *UpdateProductOK) WithPayload(payload *models.EchoExampleProduct) *UpdateProductOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update product o k response
func (o *UpdateProductOK) SetPayload(payload *models.EchoExampleProduct) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProductOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProductBadRequestCode is the HTTP code returned for type UpdateProductBadRequest
const UpdateProductBadRequestCode int = 400

/*
UpdateProductBadRequest Bad Request

swagger:response updateProductBadRequest
*/
type UpdateProductBadRequest struct {

	/*
	  In: Body
	*/
	Payload map[string]string `json:"body,omitempty"`
}

// NewUpdateProductBadRequest creates UpdateProductBadRequest with default headers values
func NewUpdateProductBadRequest() *UpdateProductBadRequest {

	return &UpdateProductBadRequest{}
}

// WithPayload adds the payload to the update product bad request response
func (o *UpdateProductBadRequest) WithPayload(payload map[string]string) *UpdateProductBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update product bad request response
func (o *UpdateProductBadRequest) SetPayload(payload map[string]string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProductBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = make(map[string]string, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
