// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteProductNoContentCode is the HTTP code returned for type DeleteProductNoContent
const DeleteProductNoContentCode int = 204

/*
DeleteProductNoContent No Content

swagger:response deleteProductNoContent
*/
type DeleteProductNoContent struct {
}

// NewDeleteProductNoContent creates DeleteProductNoContent with default headers values
func NewDeleteProductNoContent() *DeleteProductNoContent {

	return &DeleteProductNoContent{}
}

// WriteResponse to the client
func (o *DeleteProductNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteProductBadRequestCode is the HTTP code returned for type DeleteProductBadRequest
const DeleteProductBadRequestCode int = 400

/*
DeleteProductBadRequest Bad Request

swagger:response deleteProductBadRequest
*/
type DeleteProductBadRequest struct {

	/*
	  In: Body
	*/
	Payload map[string]string `json:"body,omitempty"`
}

// NewDeleteProductBadRequest creates DeleteProductBadRequest with default headers values
func NewDeleteProductBadRequest() *DeleteProductBadRequest {

	return &DeleteProductBadRequest{}
}

// WithPayload adds the payload to the delete product bad request response
func (o *DeleteProductBadRequest) WithPayload(payload map[string]string) *DeleteProductBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete product bad request response
func (o *DeleteProductBadRequest) SetPayload(payload map[string]string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProductBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = make(map[string]string, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
