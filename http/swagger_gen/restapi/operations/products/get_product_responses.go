// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"sandbox/http/swagger_gen/models"
)

// GetProductOKCode is the HTTP code returned for type GetProductOK
const GetProductOKCode int = 200

/*
GetProductOK OK

swagger:response getProductOK
*/
type GetProductOK struct {

	/*
	  In: Body
	*/
	Payload *models.EchoExampleProduct `json:"body,omitempty"`
}

// NewGetProductOK creates GetProductOK with default headers values
func NewGetProductOK() *GetProductOK {

	return &GetProductOK{}
}

// WithPayload adds the payload to the get product o k response
func (o *GetProductOK) WithPayload(payload *models.EchoExampleProduct) *GetProductOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get product o k response
func (o *GetProductOK) SetPayload(payload *models.EchoExampleProduct) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProductOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProductBadRequestCode is the HTTP code returned for type GetProductBadRequest
const GetProductBadRequestCode int = 400

/*
GetProductBadRequest Bad Request

swagger:response getProductBadRequest
*/
type GetProductBadRequest struct {

	/*
	  In: Body
	*/
	Payload map[string]string `json:"body,omitempty"`
}

// NewGetProductBadRequest creates GetProductBadRequest with default headers values
func NewGetProductBadRequest() *GetProductBadRequest {

	return &GetProductBadRequest{}
}

// WithPayload adds the payload to the get product bad request response
func (o *GetProductBadRequest) WithPayload(payload map[string]string) *GetProductBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get product bad request response
func (o *GetProductBadRequest) SetPayload(payload map[string]string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProductBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = make(map[string]string, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
